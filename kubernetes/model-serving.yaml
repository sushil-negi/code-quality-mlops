# Kubernetes manifests for model serving deployment
# These manifests provide a complete deployment setup for the MLOps model serving API

apiVersion: v1
kind: Namespace
metadata:
  name: mlops-prod
  labels:
    name: mlops-prod
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: model-serving-config
  namespace: mlops-prod
data:
  serving.json: |
    {
      "mlflow": {
        "tracking_uri": "http://mlflow-service:5000"
      },
      "default_model": "simple_bug_predictor",
      "model_cache_ttl": 3600,
      "preload_models": ["simple_bug_predictor", "hybrid_bug_predictor"],
      "ab_testing": {
        "enabled": true,
        "traffic_split": 0.5,
        "model_a": "simple_bug_predictor",
        "model_b": "hybrid_bug_predictor"
      },
      "redis": {
        "enabled": true,
        "host": "redis-service",
        "port": 6379,
        "db": 0
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-serving
  namespace: mlops-prod
  labels:
    app: model-serving
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: model-serving
  template:
    metadata:
      labels:
        app: model-serving
        component: api
    spec:
      containers:
      - name: model-serving
        image: your-registry.com/mlops/model-serving:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: CONFIG_PATH
          value: "/config/serving.json"
        - name: MLFLOW_TRACKING_URI
          value: "http://mlflow-service:5000"
        - name: ENVIRONMENT
          value: "production"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /config
        - name: model-cache
          mountPath: /app/models
      volumes:
      - name: config-volume
        configMap:
          name: model-serving-config
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: model-serving-service
  namespace: mlops-prod
  labels:
    app: model-serving
spec:
  selector:
    app: model-serving
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: LoadBalancer

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: model-serving-hpa
  namespace: mlops-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: model-serving
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: model-serving-ingress
  namespace: mlops-prod
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.mlops.example.com
    secretName: mlops-tls-secret
  rules:
  - host: api.mlops.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: model-serving-service
            port:
              number: 80

---
# Redis for A/B testing and caching
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: mlops-prod
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: mlops-prod
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Service Monitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: model-serving-metrics
  namespace: mlops-prod
  labels:
    app: model-serving
spec:
  selector:
    matchLabels:
      app: model-serving
  endpoints:
  - port: http
    path: /metrics
    interval: 30s

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: model-serving-pdb
  namespace: mlops-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: model-serving

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: model-serving-netpol
  namespace: mlops-prod
spec:
  podSelector:
    matchLabels:
      app: model-serving
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: mlflow
    ports:
    - protocol: TCP
      port: 5000
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53